{"version":3,"sources":["components/About.js","components/Navbar.js","components/Button.js","components/Textform.js","components/ALert.js","App.js","reportWebVitals.js","index.js"],"names":["About","props","textcolor","bgcolor","bordercolor","mode","className","id","type","Navbar","href","title","onClick","toggleMode","htmlFor","Button","class","fun","text","Textform","heading","buildAlert","useState","setText","value","onChange","event","target","style","backgroundColor","color","placeholder","rows","newText","toUpperCase","toLowerCase","document","getElementById","select","navigator","clipboard","writeText","split","length","ALert","alert","role","word","lower","charAt","slice","capitalize","msg","defaultProps","App","setmode","setAlert","message","setTimeout","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.e5ae8c3c.chunk.js","sourcesContent":["import React from 'react'\r\n// import Button from './Button';\r\n\r\nexport default function About(props) {\r\n\r\n    // const [style, setStyle] = useState({color:\"black\", backgroundColor:\"white\", borderColor:\"black\"});\r\n    // const [btnClass, setBtnClass] = useState(\"dark\");\r\n    // const [btnText, setBtnText] = useState(\"Enable Dark Mode\");\r\n\r\n    \r\n    // const darkOn = ()=>{\r\n        // if(props.aboutMode === \"dark\"){\r\n        //     setStyle({color:\"white\",backgroundColor:\"black\", borderColor:\"white\"});\r\n        //     // setBtnClass(\"light\");\r\n        //     // setBtnText(\"Enable Light Mode\");\r\n        // }\r\n        // else{\r\n        //     setStyle({color:\"black\",backgroundColor:\"white\"});\r\n        //     // setBtnClass(\"dark\");\r\n        //     // setBtnText(\"Enable Dark Mode\");\r\n        // }\r\n        // setBtnFun({lightOn});\r\n    // }\r\n\r\n    let textcolor,bgcolor,bordercolor;\r\n\r\n    if(props.mode === \"dark\"){\r\n            // setStyle({color:\"white\",backgroundColor:\"black\", borderColor:\"white\"});\r\n            textcolor = \"light\";\r\n            bgcolor = \"dark\";\r\n            bordercolor = \"light\";\r\n    }\r\n    else if(props.mode === \"light\"){\r\n            // setStyle({color:\"black\",backgroundColor:\"white\", borderColor:\"black\"});\r\n            textcolor = \"dark\";\r\n            bgcolor = \"light\";\r\n            bordercolor = \"dark\";\r\n    }\r\n\r\n    return (\r\n        <>\r\n        <div className={`container ${props.mode===\"light\"?\"modeShadowDark\":\"modeShadowLight\"} my-4 text-${textcolor} bg-${bgcolor} border border-${bordercolor}`}>\r\n            <h2 className=\"my-3\">About Us</h2>  \r\n            <div className={`accordion my-3 text-${textcolor} bg-${bgcolor} border border-${bordercolor}`} id=\"accordionExample\" >\r\n                <div className={`accordion-item text-${textcolor} bg-${bgcolor} border border-${bordercolor}`} >\r\n                    <h2 className=\"accordion-header\" id=\"headingOne\">\r\n                    <button className={`accordion-button collapsed text-${textcolor} bg-${bgcolor} border border-${bordercolor}`}  type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"false\" aria-controls=\"collapseOne\">\r\n                        Accordion Item #1\r\n                    </button>\r\n                    </h2>\r\n                    <div id=\"collapseOne\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\r\n                    <div className=\"accordion-body\">\r\n                        <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                    </div>\r\n                    </div>\r\n                </div>\r\n                <div className={`accordion-item text-${textcolor} bg-${bgcolor} border border-${bordercolor}`} >\r\n                    <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n                    <button className={`accordion-button collapsed text-${textcolor} bg-${bgcolor} border border-${bordercolor}`}  type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\r\n                        Accordion Item #2\r\n                    </button>\r\n                    </h2>\r\n                    <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\">\r\n                    <div className=\"accordion-body\">\r\n                        <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                    </div>\r\n                    </div>\r\n                </div>\r\n                <div className={`accordion-item text-${textcolor} bg-${bgcolor} border border-${bordercolor}`} >\r\n                    <h2 className=\"accordion-header\" id=\"headingThree\">\r\n                    <button className={`accordion-button collapsed text-${textcolor} bg-${bgcolor} border border-${bordercolor}`}  type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\">\r\n                        Accordion Item #3\r\n                    </button>\r\n                    </h2>\r\n                    <div id=\"collapseThree\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingThree\" data-bs-parent=\"#accordionExample\">\r\n                    <div className=\"accordion-body\">\r\n                        <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                    </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n{/* \r\n            <div className=\"container\">\r\n                <Button class={btnClass} fun={darkOn} text={btnText}/>\r\n            </div> */}\r\n\r\n        </div>\r\n\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport default function Navbar(props) {\r\n\r\n    let mode;\r\n\r\n    if(props.mode === \"dark\"){\r\n        mode = \"light\";\r\n    }\r\n    else{\r\n        mode = \"dark\";\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <nav className={`navbar navbar-expand-lg border-bottom border-${mode} navbar-${props.mode} bg-${props.mode}`}>\r\n                <div className=\"container-fluid\">\r\n                    <a className=\"navbar-brand\" href=\"/\">{props.title}</a>\r\n                    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                    <span className=\"navbar-toggler-icon\"></span>\r\n                    </button>\r\n                    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                    <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                        <li className=\"nav-item\">\r\n                        <a className=\"nav-link active\" aria-current=\"page\" href=\"/\">Home</a>\r\n                        </li> \r\n                    </ul>\r\n                    <div className=\"form-check form-switch\">\r\n                        <input className=\"form-check-input\" type=\"checkbox\" onClick={props.toggleMode} id=\"flexSwitchCheckDefault\"/>\r\n                        <label className={`form-check-label text-${mode}`} htmlFor=\"flexSwitchCheckDefault\">Enable Dark Mode</label>\r\n                    </div>\r\n                    </div>\r\n                </div>\r\n            </nav>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nNavbar.propTypes = {\r\n    title : PropTypes.string\r\n    // title : PropTypes.string.isRequired // it give error if we dont pass default\r\n}\r\n\r\nNavbar.defaultProps = {\r\n    title : \"tital daal idhar\"\r\n}","import React from 'react'\r\n\r\nexport default function Button(props) {\r\n    return (\r\n        <div>\r\n                <button className={`btn btn-${props.class} mx-2 my-2 border border-${props.mode}`} onClick={props.fun}>{props.text}</button>\r\n        </div>\r\n    )\r\n}\r\n","import React, {useState} from 'react'\r\nimport Button from './Button';\r\n\r\nexport default function Textform({heading,mode,buildAlert}) {\r\n\r\n    const upperCase = ()=>{\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n        buildAlert(\"converted to upper case\",\"success\");\r\n    }\r\n\r\n    const lowerCase = ()=>{\r\n        let newText = text.toLowerCase();\r\n        setText(newText);\r\n        buildAlert(\"converted to lover case\",\"success\");\r\n    }\r\n\r\n    const clearCase = ()=>{\r\n        let newText = \"\";\r\n        setText(newText);\r\n        buildAlert(\"Text is cleared\",\"warning\");\r\n    }\r\n\r\n    const copyCase = ()=>{\r\n        let text = document.getElementById('myBox')\r\n        text.select();\r\n        navigator.clipboard.writeText(text.value);\r\n        buildAlert(\"text is copied\",\"success\");\r\n    }\r\n\r\n\r\n\r\n    const textChange = (event)=>{\r\n        setText(event.target.value);\r\n    }\r\n\r\n\r\n\r\n    const [text , setText] = useState(\"\");\r\n\r\n\r\n    return (\r\n        <>\r\n\r\n        <div className={`container ${mode===\"light\"?\"modeShadowDark\":\"modeShadowLight\"} my-5 py-3 bg-${mode} text-${mode===\"dark\"?\"light\":\"dark\"}`}>\r\n            <h1>{heading}</h1> \r\n            <div className=\"mb-3\">\r\n                <label htmlFor=\"myBox\" className=\"form-label\"></label>\r\n                <textarea className=\"form-control\" value={text} onChange={textChange}  style={{backgroundColor:mode===\"dark\"?\"rgb(51, 51, 51)\":\"white\", color:mode===\"dark\"?\"white\":\"black\"}}  placeholder=\"Enter Text here...\" id=\"myBox\" rows=\"6\"></textarea>\r\n            </div>\r\n\r\n            <div className=\"d-flex flex-wrap\">\r\n                <Button class=\"primary\" fun={upperCase} text=\"Convert to UpperCase\" mode={mode===\"dark\"?\"light\":\"dark\"}/>\r\n                <Button class=\"primary\" fun={lowerCase} text=\"Convert to LowerCase\" mode={mode===\"dark\"?\"light\":\"dark\"}/>\r\n                <Button class=\"danger\" fun={clearCase} text=\"Clear Text\" mode={mode===\"dark\"?\"light\":\"dark\"}/>\r\n                <Button class=\"light\" fun={copyCase} text=\"Copy Text\" mode={mode===\"dark\"?\"light\":\"dark\"}/>\r\n            </div>\r\n        </div>\r\n\r\n        <div className={`container ${mode===\"light\"?\"modeShadowDark\":\"modeShadowLight\"} my-5 p-3 bg-${mode} text-${mode===\"dark\"?\"light\":\"dark\"}`}>\r\n            <h2>Your Text Summary</h2>\r\n            <p><b>{(text === \"\")?0:text.split(\" \").length + text.split(/\\n/).length -1}</b> Words and <b>{text.length}</b> Characters</p>\r\n            <p>Time Takes to Read is <b>{(text.split(\" \").length + text.split(/\\n/).length - 2)*0.008}</b> minutes </p>\r\n            <h2>Preview</h2>\r\n            <p>{text.length>0?text:\"Enter Something it the textbox above to Preview it here...\"}</p>\r\n        </div>\r\n\r\n        </>\r\n    )\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function ALert(props) {\r\n\r\n    const capitalize = (word)=>{\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n  return (\r\n    props.alert && <div>\r\n      <div\r\n        className={`alert alert-${props.alert.type} alert-dismissible fade show`}\r\n        role=\"alert\"\r\n      >\r\n          <strong>{capitalize(props.alert.type)}</strong> : \r\n          {props.alert.msg}\r\n        \r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import './App.css';\nimport About from './components/About';\nimport Navbar from './components/Navbar';\nimport Textform from './components/Textform';\n\nimport {useState} from \"react\";\nimport ALert from './components/ALert';\n\nfunction App() {\n\n  const [mode, setmode] = useState(\"light\");\n  const [alert, setAlert] = useState(null)\n\n  const toggleMode = ()=>{\n    if(mode === \"light\"){\n      setmode(\"dark\");\n      document.body.style.backgroundColor = \"rgb(51, 51, 51)\";\n      buildAlert(\"Dark Mode Has Been Eabled\" , \"success\");\n    }\n    else if(mode === \"dark\"){\n      setmode(\"light\");\n      document.body.style.backgroundColor = \"white\";\n      buildAlert(\"Light Mode Has Been Eabled\" , \"success\");\n    }\n  }\n\n  const buildAlert = (message , type)=>{\n    setAlert({\n      msg : message,\n      type : type\n    });\n    setTimeout(() => {\n      setAlert(null)\n    }, 2500);\n  }\n  \n  return (\n    <>\n      <Navbar title=\"Navbar\" mode={mode} toggleMode = {toggleMode}/> \n\n      <ALert alert={alert}/>\n\n      <div className=\"container my-3\">\n        <Textform heading=\"Enter the Text to Analyse\" mode = {mode} buildAlert={buildAlert}/>\n        <About mode = {mode}/>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}